# This is a basic workflow to help you get started with Actions

name: CI-Test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: src/docker-compose.integration-tests.yml

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Step 2: Install docker-compose
    - name: Install Docker Compose
      run: |
        if ! command -v docker-compose &> /dev/null
        then
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        else
          echo "docker-compose installation found. Skipping install."
        fi

    - name: Build test image
      run: docker-compose build

    - name: Run tests
      run: docker-compose up --abort-on-container-exit

  # This workflow contains a single job called "build"
  build:
    needs: test  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Create empty .env file. 
        run: touch src/.env

      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      # Step 2: Install docker-compose
      - name: Install Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null
          then
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "docker-compose installation found. Skipping install."
          fi

      - uses: isbang/compose-action@v1.3.2
        with:
            compose-file: "src/docker-compose.yml"
            up-flags: "--no-start"
        env:
            COMMIT_SHA: ${{ github.sha }}
            RUN_NUMBER: ${{ github.run_number }}
            BUILD_DATE: ${{ env.NOW }}

      # Pull AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: workbc-jb-github-action
          role-skip-session-tagging: true
          
      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Push images into ECR
      - name: Tag the Admin docker image
        run: |
          docker tag src_admin:latest ${{ secrets.AWS_ECR_URI }}/jb-admin:${{ github.sha }}
      - name: Push Admin docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-admin:${{ github.sha }}
          
      - name: Tag the Wanted Importer docker image
        run: |
          docker tag src_importers-wanted:latest ${{ secrets.AWS_ECR_URI }}/jb-importers-wanted:${{ github.sha }}
      - name: Push the Wanted Importer docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-importers-wanted:${{ github.sha }}
          
      - name: Tag the Federal Importer docker image
        run: |
          docker tag src_importers-federal:latest ${{ secrets.AWS_ECR_URI }}/jb-importers-federal:${{ github.sha }}
      - name: Push Federal Importer docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-importers-federal:${{ github.sha }}
          
      - name: Tag the Wanted Indexer docker image
        run: |
          docker tag src_indexers-wanted:latest ${{ secrets.AWS_ECR_URI }}/jb-indexers-wanted:${{ github.sha }}
      - name: Push the Wanted Indexer docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-indexers-wanted:${{ github.sha }}
          
      - name: Tag the Federal indexer docker image
        run: |
          docker tag src_indexers-federal:latest ${{ secrets.AWS_ECR_URI }}/jb-indexers-federal:${{ github.sha }}
      - name: Push the Federal indexer docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-indexers-federal:${{ github.sha }}
          
      - name: Tag the Web docker image
        run: |
          docker tag src_web:latest ${{ secrets.AWS_ECR_URI }}/jb:${{ github.sha }}
      - name: Push Web docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb:${{ github.sha }}

      - name: Tag the Notification docker image
        run: |
          docker tag src_notifications-job-alerts:latest ${{ secrets.AWS_ECR_URI }}/jb-notifications:${{ github.sha }}
      - name: Push Notification docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-notifications:${{ github.sha }}

      - name: Tag the EFMigrationRunner docker image
        run: |
          docker tag src_migration-runner:latest ${{ secrets.AWS_ECR_URI }}/jb-migration:${{ github.sha }}
      - name: Push EFMigrationRunner docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-migration:${{ github.sha }}

      - name: Tag the Dotnet CLI docker image
        run: |
          docker tag src_dotnet-cli:latest ${{ secrets.AWS_ECR_URI }}/jb-cli:${{ github.sha }}
      - name: Push Dotnet CLI docker image
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}/jb-cli:${{ github.sha }}
