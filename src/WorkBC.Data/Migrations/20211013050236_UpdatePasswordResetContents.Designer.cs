// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkBC.Data;

namespace WorkBC.Data.Migrations
{
    [DbContext(typeof(JobBoardContext))]
    [Migration("20211013050236_UpdatePasswordResetContents")]
    partial class UpdatePasswordResetContents
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DateLastLogin")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DateLocked")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("GivenName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Guid")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("LockedByAdminUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByAdminUserId")
                        .HasColumnType("int");

                    b.Property<string>("SamAccountName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Surname")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("LockedByAdminUserId");

                    b.HasIndex("ModifiedByAdminUserId");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CountryTwoLetterCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.DeletedJob", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("timestamp");

                    b.Property<int>("DeletedByAdminUserId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("DeletedByAdminUserId");

                    b.ToTable("DeletedJobs");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ExpiredJob", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateRemoved")
                        .HasColumnType("timestamp");

                    b.Property<bool>("RemovedFromElasticsearch")
                        .HasColumnType("bit");

                    b.HasKey("JobId");

                    b.ToTable("ExpiredJobs");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.GeocodedLocationCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateGeocoded")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.ToTable("GeocodedLocationCache");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Impersonation", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateTokenCreated")
                        .HasColumnType("timestamp");

                    b.HasKey("Token");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("AspNetUserId");

                    b.ToTable("ImpersonationLog");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ImportedJobFederal", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ApiDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateFirstImported")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateLastImported")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DisplayUntil")
                        .HasColumnType("timestamp");

                    b.Property<string>("JobPostEnglish")
                        .HasColumnType("varchar");

                    b.Property<string>("JobPostFrench")
                        .HasColumnType("varchar");

                    b.Property<bool>("ReIndexNeeded")
                        .HasColumnType("bit");

                    b.HasKey("JobId");

                    b.ToTable("ImportedJobsFederal");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ImportedJobWanted", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ApiDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateFirstImported")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateLastImported")
                        .HasColumnType("timestamp");

                    b.Property<long>("HashId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFederalOrWorkBc")
                        .HasColumnType("bit");

                    b.Property<string>("JobPostEnglish")
                        .HasColumnType("varchar");

                    b.Property<bool>("ReIndexNeeded")
                        .HasColumnType("bit");

                    b.HasKey("JobId");

                    b.HasIndex("HashId")
                        .IsUnique();

                    b.ToTable("ImportedJobsWanted");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Industry", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.IndustryNaics", b =>
                {
                    b.Property<short>("IndustryId")
                        .HasColumnType("smallint");

                    b.Property<short>("NaicsId")
                        .HasColumnType("smallint");

                    b.HasKey("IndustryId", "NaicsId");

                    b.ToTable("IndustryNaics");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Job", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ActualDatePosted")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Casual")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("DateFirstImported")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateLastImported")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp");

                    b.Property<string>("EmployerName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ExternalSourceUrl")
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<bool>("FullTime")
                        .HasColumnType("bit");

                    b.Property<short?>("IndustryId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("JobSourceId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp");

                    b.Property<bool>("LeadingToFullTime")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<short?>("NocCodeId")
                        .HasColumnType("smallint");

                    b.Property<string>("OriginalSource")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PartTime")
                        .HasColumnType("bit");

                    b.Property<bool>("Permanent")
                        .HasColumnType("bit");

                    b.Property<short>("PositionsAvailable")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SalarySummary")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("Seasonal")
                        .HasColumnType("bit");

                    b.Property<bool>("Temporary")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("JobId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobSourceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NocCodeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("AlertFrequency")
                        .HasColumnType("tinyint");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobSearchFilters")
                        .HasColumnType("varchar");

                    b.Property<int>("JobSearchFiltersVersion")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UrlParameters")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("DateCreated");

                    b.ToTable("JobAlerts");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobId", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateFirstImported")
                        .HasColumnType("timestamp");

                    b.Property<byte>("JobSourceId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("JobSourceId");

                    b.ToTable("JobIds");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeeker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<short>("AccountStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateLocked")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastLogon")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LegacyWebUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LockedByAdminUserId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityAnswer")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SecurityQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("VerificationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DateRegistered")
                        .HasAnnotation("SqlServer:Include", new[] { "LastName", "FirstName", "Email", "AccountStatus" });

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL")
                        .HasAnnotation("SqlServer:Include", new[] { "LastName", "FirstName", "AccountStatus" });

                    b.HasIndex("LastModified")
                        .HasAnnotation("SqlServer:Include", new[] { "LastName", "FirstName", "Email", "AccountStatus" });

                    b.HasIndex("LocationId");

                    b.HasIndex("LockedByAdminUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SecurityQuestionId");

                    b.HasIndex("FirstName", "LastName")
                        .HasAnnotation("SqlServer:Include", new[] { "Email", "AccountStatus" });

                    b.HasIndex("LastName", "FirstName")
                        .HasAnnotation("SqlServer:Include", new[] { "Email", "AccountStatus" });

                    b.HasIndex("AccountStatus", "LastName", "FirstName")
                        .HasAnnotation("SqlServer:Include", new[] { "Email" });

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerAdminComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("timestamp");

                    b.Property<int>("EnteredByAdminUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("EnteredByAdminUserId");

                    b.ToTable("JobSeekerAdminComments");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerChangeEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp");

                    b.Property<string>("Field")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ModifiedByAdminUserId")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("varchar");

                    b.Property<string>("OldValue")
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("ModifiedByAdminUserId");

                    b.ToTable("JobSeekerChangeLog");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateLogged")
                        .HasColumnType("timestamp");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("DateLogged");

                    b.ToTable("JobSeekerEventLog");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerFlags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("IsApprentice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIndigenousPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatureWorker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewImmigrant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonWithDisability")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeteran")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisibleMinority")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYouth")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId")
                        .IsUnique()
                        .HasFilter("[AspNetUserId] IS NOT NULL");

                    b.ToTable("JobSeekerFlags");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("AccountStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DateVersionEnd")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateVersionStart")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprentice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIndigenousPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatureWorker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewImmigrant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonWithDisability")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeteran")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisibleMinority")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYouth")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<short>("VersionNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("AspNetUserId", "VersionNumber")
                        .IsUnique()
                        .HasFilter("[AspNetUserId] IS NOT NULL");

                    b.ToTable("JobSeekerVersions");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSource", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("ListOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobSources");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActualDatePosted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DateVersionEnd")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateVersionStart")
                        .HasColumnType("timestamp");

                    b.Property<short?>("IndustryId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("bit");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<byte>("JobSourceId")
                        .HasColumnType("tinyint");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<short?>("NocCodeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("OriginalDatePosted")
                        .HasColumnType("timestamp");

                    b.Property<short>("PositionsAvailable")
                        .HasColumnType("smallint");

                    b.Property<short>("VersionNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NocCodeId");

                    b.HasIndex("JobId", "VersionNumber")
                        .IsUnique();

                    b.ToTable("JobVersions");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobView", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateLastViewed")
                        .HasColumnType("timestamp");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.ToTable("JobViews");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("BcStatsPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("EDM_Location_DistrictLocationId");

                    b.Property<int?>("FederalCityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDuplicate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("RegionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.NocCategory", b =>
                {
                    b.Property<string>("CategoryCode")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("CategoryCode");

                    b.ToTable("NocCategories");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.NocCode", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("FrenchTitle")
                        .HasMaxLength(180)
                        .HasColumnType("varchar(180)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("NocCodes");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<short>("ListOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.JobSeekerStat", b =>
                {
                    b.Property<int>("WeeklyPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("LabelKey")
                        .HasColumnType("varchar(4)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("WeeklyPeriodId", "LabelKey", "RegionId");

                    b.HasIndex("LabelKey");

                    b.HasIndex("RegionId");

                    b.ToTable("JobSeekerStats");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.JobSeekerStatLabel", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<bool>("IsTotal")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Key");

                    b.ToTable("JobSeekerStatLabels");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.JobStat", b =>
                {
                    b.Property<int>("WeeklyPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<byte>("JobSourceId")
                        .HasColumnType("tinyint");

                    b.Property<int>("JobPostings")
                        .HasColumnType("int");

                    b.Property<int>("PositionsAvailable")
                        .HasColumnType("int");

                    b.HasKey("WeeklyPeriodId", "RegionId", "JobSourceId");

                    b.HasIndex("JobSourceId");

                    b.HasIndex("RegionId");

                    b.ToTable("JobStats");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.ReportPersistenceControl", b =>
                {
                    b.Property<int>("WeeklyPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("DateCalculated")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsTotalToDate")
                        .HasColumnType("bit");

                    b.HasKey("WeeklyPeriodId", "TableName");

                    b.ToTable("ReportPersistenceControl");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.WeeklyPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("CalendarMonth")
                        .HasColumnType("tinyint");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<short>("FiscalYear")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEndOfFiscalYear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndOfMonth")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WeekEndDate")
                        .HasColumnType("timestamp");

                    b.Property<byte>("WeekOfMonth")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("WeekEndDate");

                    b.ToTable("WeeklyPeriods");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SavedCareerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("CareerProfileId")
                        .HasColumnType("int")
                        .HasColumnName("EDM_CareerProfile_CareerProfileId");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("DateDeleted");

                    b.HasIndex("DateSaved");

                    b.ToTable("SavedCareerProfiles");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SavedIndustryProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("timestamp");

                    b.Property<int>("IndustryProfileId")
                        .HasColumnType("int")
                        .HasColumnName("EDM_IndustryProfile_IndustryProfileId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("DateDeleted");

                    b.HasIndex("DateSaved");

                    b.ToTable("SavedIndustryProfiles");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SavedJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<DateTime?>("NoteUpdatedDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("JobId");

                    b.ToTable("SavedJobs");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SecurityQuestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestions");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SystemSetting", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar");

                    b.Property<string>("Description")
                        .HasColumnType("varchar");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByAdminUserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("varchar");

                    b.HasKey("Name");

                    b.HasIndex("ModifiedByAdminUserId");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.AdminUser", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "LockedByAdminUser")
                        .WithMany()
                        .HasForeignKey("LockedByAdminUserId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "ModifiedByAdminUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByAdminUserId");

                    b.Navigation("LockedByAdminUser");

                    b.Navigation("ModifiedByAdminUser");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.DeletedJob", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "DeletedByAdminUser")
                        .WithMany()
                        .HasForeignKey("DeletedByAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeletedByAdminUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ExpiredJob", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobId", "Id")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Impersonation", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.Navigation("AdminUser");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ImportedJobFederal", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobId", "Id")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ImportedJobWanted", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobId", "Id")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.IndustryNaics", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Job", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.JobId", "Id")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSource", "JobSource")
                        .WithMany()
                        .HasForeignKey("JobSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.NocCode", "NocCode")
                        .WithMany()
                        .HasForeignKey("NocCodeId");

                    b.Navigation("Id");

                    b.Navigation("Industry");

                    b.Navigation("JobSource");

                    b.Navigation("Location");

                    b.Navigation("NocCode");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobAlert", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobId", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSource", "JobSource")
                        .WithMany()
                        .HasForeignKey("JobSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSource");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeeker", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "LockedByAdminUser")
                        .WithMany()
                        .HasForeignKey("LockedByAdminUserId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.SecurityQuestion", "SecurityQuestion")
                        .WithMany()
                        .HasForeignKey("SecurityQuestionId");

                    b.Navigation("Country");

                    b.Navigation("Location");

                    b.Navigation("LockedByAdminUser");

                    b.Navigation("Province");

                    b.Navigation("SecurityQuestion");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerAdminComment", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "EnteredByAdminUser")
                        .WithMany()
                        .HasForeignKey("EnteredByAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnteredByAdminUser");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerChangeEvent", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "ModifiedByAdminUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByAdminUserId");

                    b.Navigation("JobSeeker");

                    b.Navigation("ModifiedByAdminUser");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerEvent", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerFlags", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithOne("JobSeekerFlags")
                        .HasForeignKey("WorkBC.Data.Model.JobBoard.JobSeekerFlags", "AspNetUserId");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeekerVersion", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Country");

                    b.Navigation("JobSeeker");

                    b.Navigation("Location");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobVersion", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.NocCode", "NocCode")
                        .WithMany()
                        .HasForeignKey("NocCodeId");

                    b.Navigation("Industry");

                    b.Navigation("Job");

                    b.Navigation("Location");

                    b.Navigation("NocCode");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobView", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.Location", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.JobSeekerStat", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.ReportData.JobSeekerStatLabel", "JobSeekerStatLabel")
                        .WithMany()
                        .HasForeignKey("LabelKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.ReportData.WeeklyPeriod", "WeeklyPeriod")
                        .WithMany()
                        .HasForeignKey("WeeklyPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeekerStatLabel");

                    b.Navigation("Region");

                    b.Navigation("WeeklyPeriod");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.JobStat", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSource", "JobSource")
                        .WithMany()
                        .HasForeignKey("JobSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkBC.Data.Model.JobBoard.ReportData.WeeklyPeriod", "WeeklyPeriod")
                        .WithMany()
                        .HasForeignKey("WeeklyPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSource");

                    b.Navigation("Region");

                    b.Navigation("WeeklyPeriod");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.ReportData.ReportPersistenceControl", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.ReportData.WeeklyPeriod", "WeeklyPeriod")
                        .WithMany()
                        .HasForeignKey("WeeklyPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeeklyPeriod");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SavedCareerProfile", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SavedIndustryProfile", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SavedJob", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.JobSeeker", "JobSeeker")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("WorkBC.Data.Model.JobBoard.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.SystemSetting", b =>
                {
                    b.HasOne("WorkBC.Data.Model.JobBoard.AdminUser", "ModifiedByAdminUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModifiedByAdminUser");
                });

            modelBuilder.Entity("WorkBC.Data.Model.JobBoard.JobSeeker", b =>
                {
                    b.Navigation("JobSeekerFlags");
                });
#pragma warning restore 612, 618
        }
    }
}
